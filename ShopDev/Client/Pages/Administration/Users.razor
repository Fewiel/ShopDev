@page "/Administration/Users"
@inherits BasePage
@inject HttpClient Http
@inject AppState State

@if (UserData != null)
{
    <a @onclick=AddUser style="cursor: pointer; font-size: 30px;"><i class="bi bi-person-fill-gear" /></a>

    <Table TableData="@UserData">
        <td>
            @if (context.Active && context.ExpirationDate == null)
            {
                <i class="bi bi-person-fill success-light"></i>
            }
            else if (context.Active && context.ExpirationDate != null)
            {
                <i class="bi bi-person-fill warning-light"></i>
            }
            else
            {
                <i class="bi bi-person-fill-slash error-light"></i>
            }
        </td>
        <td>@context.Username</td>
        <td>@context.Name</td>
        <td>@context.Email</td>
        <td>@context.RoleName</td>
        <td>
            @{
                var id = context.Id;
            }
            <a @onclick=@(() => EditUser(id)) style="cursor: pointer;"><i class="bi bi-person-fill-gear" /></a>
            <a @onclick=@(() => LockUser(id)) style="cursor: pointer;"><i class="bi bi-person-fill-lock"></i></a>
            <a @onclick=@(() => DeleteUser(id)) style="cursor: pointer;"><i class="bi bi-person-fill-x"></i></a>
        </td>
    </Table>
}
else
{
    <LoadingSpinner />
}

@code {
    private List<TableHeaderData> TableHeaders = new() {
        new TableHeaderData { Content = "State" },
        new TableHeaderData { Content = "Username" },
        new TableHeaderData { Content = "Name" },
        new TableHeaderData { Content = "E-Mail" },
        new TableHeaderData { Content = "Role" },
        new TableHeaderData { Content = "Actions" },
    };

    private TableData<User>? UserData;

    protected override async Task OnInitializedAsync()
    {
        if (!await CheckLoginNavigateAsync())
            return;

        await GetUsers();
    }

    private void EditUser(Guid userId)
    {
        ModalManager.Instance!.Show<UserEditorModal>(new Dictionary<string, object> { { "UserId", userId } });
    }

    private void AddUser()
    {
        ModalManager.Instance!.Show<AddUserEditorModal>();
    }

    private async Task LockUser(Guid userId)
    {
        var response = await Http.PostAsJsonAsync<GenericRequest<Guid>>(
            "Administration/Users/Lock", new GenericRequest<Guid>
                {
                    Token = State.User?.Token,
                    UserId = State.User?.UserId,
                    Value = userId
                });

        await ProcessMessages(response);
        await GetUsers();
    }

    private async Task DeleteUser(Guid userId)
    {
        var response = await Http.PostAsJsonAsync<GenericRequest<Guid>>(
            "Administration/Users/Delete", new GenericRequest<Guid>
                {
                    Token = State.User?.Token,
                    UserId = State.User?.UserId,
                    Value = userId
                });

        await ProcessMessages(response);
        await GetUsers();
    }

    private async Task ProcessMessages(HttpResponseMessage response)
    {
        var result = await response.Content.ReadFromJsonAsync<LoginResponseModel>();

        if (result == null)
        {
            ToastManager.Instance?.Add("Something went wrong.., Contact your nearest Collegue and try again");
        }
        else
        {
            foreach (var msg in result.Messages!)
            {
                ToastManager.Instance?.Add(msg.Content);
            }
        }
    }

    private async Task GetUsers()
    {
        var response = await Http.PostAsJsonAsync<RequestBase>(
            "Administration/Users/GetAll", new RequestBase
                {
                    Token = State.User?.Token,
                    UserId = State.User?.UserId
                });

        var result = await response.Content.ReadFromJsonAsync<GenericRepsonse<List<User>>>();

        UserData = new(TableHeaders, result.Value);
    }

    
}