@layout FormOnlyLayout
@page "/Login"
@inject HttpClient Http
@inject AppState State
@inject NavigationManager Nav
@inject ILocalStorageService Storage

<div id="loginform">
    <div class="text-center pt-3 pb-3">
        <span class="db">
            <img src="../assets/images/logo.png" alt="logo" style="height: 18rem;" />
        </span>
    </div>

    <div class="form-horizontal mt-3">
        <div class="row pb-4">
            <div class="col-12">

                <FormInput @ref=InputUsername
                           Icon="bi bi-person"
                           Placeholder="Username"
                           Disabled=TaskRunning
                           @bind-Value="Username"
                           OnEnter=DoSignIn />

                <FormInput @ref=InputPassword
                           Icon="bi bi-shield-lock"
                           Placeholder="Password"
                           Type="password"
                           Disabled=TaskRunning
                           @bind-Value="Password"
                           OnEnter=DoSignIn />

                <FormSwitch Text="Keep signed in" @bind-Value=KeepSignedIn Disabled=@TaskRunning />

            </div>
        </div>
        <div class="row border-top border-secondary">
            <div class="col-12">
                <div class="form-group">
                    <div class="pt-3">
                        <button class="btn btn-sw-blue"
                                style="font-size: 140%;"
                                disabled="@TaskRunning">
                            <i class="bi bi-shield-lock"></i> Lost password?
                        </button>
                        <button class="btn float-end btn-sw-blue" style="font-size: 140%; min-width: 100px;"
                                disabled="@TaskRunning"
                                @onclick=DoSignIn>
                            @if (TaskRunning)
                            {
                                <div class="spinner-border text-light" role="status" />
                            }
                            else
                            {
                                <span><i class="bi bi-box-arrow-in-right"></i> Login</span>
                            }
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string? Username;
    private string? Password;
    private bool KeepSignedIn;

    private bool TaskRunning;

    private FormInput? InputUsername;
    private FormInput? InputPassword;

    private async Task DoSignIn()
    {
        InputUsername?.SetError(null);
        InputPassword?.SetError(null);

        TaskRunning = true;
        var response = await Http.PostAsJsonAsync<LoginRequestModel>("Login/Login", new LoginRequestModel
            {
                Username = Username,
                Password = Password
            });

        var result = await response.Content.ReadFromJsonAsync<LoginResponseModel>();

        if (result == null)
        {
            ToastManager.Instance?.Add("Something went wrong.., Contact your nearest Collegue and try again");
        }
        else if (!result.Success)
        {
            if (result.Messages != null)
            {
                foreach (var msg in result.Messages!)
                {
                    ToastManager.Instance?.Add(msg.Content);
                }
            }

            if (result.FormValidations != null)
            {
                if (result.FormValidations.TryGetValue("Username", out var errorUsername))
                    InputUsername?.SetError(errorUsername);
                if (result.FormValidations.TryGetValue("Password", out var errorPassword))
                    InputPassword?.SetError(errorPassword);
            }
        }
        else
        {
            State.User = new UserState
                {
                    Username = Username,
                    UserId = result.UserId,
                    Token = result.Token,
                    Permissions = result.Permissions,
                    Limits = result.Limits
                };

            if (KeepSignedIn)
            {
                await Storage.SetItemAsync("User", State.User);
            }
            else
            {
                await Storage.RemoveItemAsync("User");
            }

            Nav.NavigateTo(State.NavigationURLAfterAction);
            State.NavigationURLAfterAction = "/Home";
        }

        TaskRunning = false;
    }
}