@inject HttpClient Http
@inject AppState State

<ModalHeader Titel=@(User == null ? "Loading User..." : $"Edit User: {User.Username}") />

<ModalBody>
    @UserId

    @if (User == null)
    {
        <span>Loading...</span>
    }
    else
    {
        @User.Username
    }
</ModalBody>

<ModalFooter>
    <button type="button" class="btn btn-secondary" @onclick=Close>Close</button>
    <button type="button" class="btn btn-primary" disabled=@(User == null || TaskRunning)>Save</button>
</ModalFooter>

@code {
    [Parameter]
    public Guid UserId { get; set; }
    private User? User;
    private bool TaskRunning;


    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("OnSetParameter: " + UserId);
        var response = await Http.PostAsJsonAsync<GenericRequest<Guid>>(
            "Administration/Users/Get", new GenericRequest<Guid>
                {
                    Token = State.User?.Token,
                    UserId = State.User?.UserId,
                    Value = UserId
                });

        User = (await response.Content.ReadFromJsonAsync<GenericRepsonse<User>>()).Value;
        Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(User));
        StateHasChanged();
    }

    private void Save() 
    {
        //var response = await Http.PostAsJsonAsync<RequestBase>(
        //    "Administration/Users/Get", new RequestBase
        //    {
        //        Token = State.User?.Token,
        //        UserId = State.User?.UserId
        //    });

        //var result = await response.Content.ReadFromJsonAsync<GenericRepsonse<List<User>>>();
    }

    private void Close() 
    {
        ModalManager.Instance?.Hide();
    }
}
