<div class="mb-3">
    <div class="input-group">
        @if (Icon != null)
        {
            <div class="input-group-prepend">
                <span class="input-group-text bg-sw-blue text-white h-100" style="font-size: 140%;">
                    <i class="@Icon"></i>
                </span>
            </div>
        }

        <input type="@Type"
               class="form-control form-control-lg"
               placeholder="@(Placeholder ?? "")"
               disabled="@Disabled"
               @bind=Value
               @bind:event="oninput"
               @onkeydown=KeyDown />
    </div>

    @if (Error != null)
    {
        <div class="invalid-feedback" style="display: block; font-size: 100%">
            @Error
        </div>
    }
</div>
@code {
    [Parameter]
    public string? Placeholder { get; set; }
    [Parameter]
    public string? Icon { get; set; }
    [Parameter]
    public bool Disabled { get; set; }
    [Parameter]
    public string Type { get; set; } = "text";
    [Parameter]
    public string? Error { get; set; }

    private string? _value;
    [Parameter]
    public string? Value
    {
        get => _value;
        set
        {
            if (_value == value)
                return;

            _value = value;
            ContentChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> ContentChanged { get; set; }

    [Parameter]
    public EventCallback OnEnter { get; set; }

    private void KeyDown(KeyboardEventArgs keyArgs)
    {
        if (keyArgs.Code == "Enter" || keyArgs.Code == "NumpadEnter")
            OnEnter.InvokeAsync();
    }

    public void SetError(string? err)
    {
        Error = err;
        StateHasChanged();
    }
}